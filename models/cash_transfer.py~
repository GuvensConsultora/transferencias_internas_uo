# -*- coding: utf-8 -*-
from odoo import api, fields, models, _
from odoo.exceptions import UserError

class CashTransfer(models.Model):
    _name = 'cash.transfer'
    _description = 'Transferencia de Efectivo'
    _order = 'date desc, id desc'

    date = fields.Date(string='Fecha', default=fields.Date.context_today, required=True)
    company_id = fields.Many2one('res.company', string='Compañía', required=True, default=lambda self: self.env.company)
    journal_id_from = fields.Many2one('account.journal', string='Desde', required=True)
    journal_id_to = fields.Many2one('account.journal', string='Hacia', required=True)
    amount = fields.Monetary(string='Importe', required=True)
    currency_id = fields.Many2one(
        'res.currency',
        string='Moneda',
        required=True,
        default=lambda self: self.env.company.currency_id.id
    )
    state = fields.Selection(
        [('draft', 'Borrador'), ('validated', 'Validado')],
        default='draft',
        tracking=True
    )

    def _main_account(self, journal):
        if not journal:
            return False
        return journal.default_account_id or journal.payment_debit_account_id or journal.payment_credit_account_id

    def action_validate(self):
        for rec in self:
            if rec.amount <= 0:
                raise UserError(_('El importe debe ser mayor a cero.'))
            if not rec.journal_id_from or not rec.journal_id_to:
                raise UserError(_('Debe seleccionar ambos diarios.'))
            if rec.journal_id_from == rec.journal_id_to:
                raise UserError(_('El diario de origen y destino no pueden ser el mismo.'))

            acc_from = rec._main_account(rec.journal_id_from)
            acc_to = rec._main_account(rec.journal_id_to)
            if not acc_from or not acc_to:
                raise UserError(_('Falta configurar la cuenta principal en uno de los diarios.'))

            company_currency = rec.company_id.currency_id
            transfer_currency = rec.currency_id

            # Construir las líneas según si es misma moneda o distinta
            if transfer_currency != company_currency:
                debit_amount = transfer_currency._convert(
                    rec.amount, company_currency, rec.company_id, rec.date
                )
                credit_amount = debit_amount
                line_in = {
                    'name': _('Entrada a %s') % rec.journal_id_to.name,
                    'account_id': acc_to.id,
                    'debit': debit_amount,
                    'credit': 0.0,
                    'currency_id': transfer_currency.id,
                    'amount_currency': rec.amount,
                    'company_id': rec.company_id.id,
                }
                line_out = {
                    'name': _('Salida de %s') % rec.journal_id_from.name,
                    'account_id': acc_from.id,
                    'debit': 0.0,
                    'credit': credit_amount,
                    'currency_id': transfer_currency.id,
                    'amount_currency':rec.amount,
                    'company_id': rec.company_id.id,
                }
            else:
                line_in = {
                    'name': _('Entrada a %s') % rec.journal_id_to.name,
                    'account_id': acc_to.id,
                    'debit': rec.amount,
                    'credit': 0.0,
                    'currency_id': company_currency.id,
                    'amount_currency': 0.0,
                    'company_id': rec.company_id.id,
                }
                line_out = {
                    'name': _('Salida de %s') % rec.journal_id_from.name,
                    'account_id': acc_from.id,
                    'debit': 0.0,
                    'credit': rec.amount,
                    'currency_id': company_currency.id,
                    'amount_currency': 0.0,
                    'company_id': rec.company_id.id,
                }

            move_vals = {
                'date': rec.date,
                'journal_id': rec.journal_id_to.id,
                'ref': _('Transferencia de efectivo #%s') % rec.id,
                'line_ids': [(0, 0, line_in), (0, 0, line_out)],
                'company_id': rec.company_id.id,
            }
            move = self.env['account.move'].create(move_vals)
            move.action_post()
            rec.state = 'validated'
        return True

